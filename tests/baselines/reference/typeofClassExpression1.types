=== tests/cases/conformance/types/specifyingTypes/typeQueries/typeofClassExpression1.ts ===
type TC1 = typeof class {
>TC1 : typeof (Anonymous class)
>class {    constructor(s: string);    static n: number;    s: string;} : typeof (Anonymous class)

    constructor(s: string);
>s : string

    static n: number;
>n : number

    s: string;
>s : string
}

declare let C1: TC1;
>C1 : typeof (Anonymous class)

C1.n;
>C1.n : number
>C1 : typeof (Anonymous class)
>n : number

let c1 = new C1('hello');
>c1 : (Anonymous class)
>new C1('hello') : (Anonymous class)
>C1 : typeof (Anonymous class)
>'hello' : "hello"

c1.s;
>c1.s : string
>c1 : (Anonymous class)
>s : string

declare let C2: typeof class {
>C2 : typeof (Anonymous class)
>class {    constructor(s: string);    static n: number;    s: string;} : typeof (Anonymous class)

    constructor(s: string);
>s : string

    static n: number;
>n : number

    s: string;
>s : string
}
C2.n;
>C2.n : number
>C2 : typeof (Anonymous class)
>n : number

let c2 = new C2('hello');
>c2 : (Anonymous class)
>new C2('hello') : (Anonymous class)
>C2 : typeof (Anonymous class)
>'hello' : "hello"

c2.s;
>c2.s : string
>c2 : (Anonymous class)
>s : string

declare let C3: typeof class extends Error {
>C3 : typeof (Anonymous class)
>class extends Error {    constructor(s: string);    static n: number;} : typeof (Anonymous class)
>Error : Error

    constructor(s: string);
>s : string

    static n: number;
>n : number
}
C3.n;
>C3.n : number
>C3 : typeof (Anonymous class)
>n : number

let c3 = new C3('hello');
>c3 : (Anonymous class)
>new C3('hello') : (Anonymous class)
>C3 : typeof (Anonymous class)
>'hello' : "hello"

c3.message;
>c3.message : string
>c3 : (Anonymous class)
>message : string

declare let C4: typeof abstract class {
>C4 : typeof (Anonymous class)
>abstract class {    constructor(s: string);    static n: number;    s: string;} : typeof (Anonymous class)

    constructor(s: string);
>s : string

    static n: number;
>n : number

    s: string;
>s : string
}
C4.n;
>C4.n : number
>C4 : typeof (Anonymous class)
>n : number

let c4 = new C4('hello');  // Error
>c4 : any
>new C4('hello') : any
>C4 : typeof (Anonymous class)
>'hello' : "hello"

declare let C5: typeof class<T> {
>C5 : typeof (Anonymous class)
>class<T> {    constructor(x: T);    x: T;} : typeof (Anonymous class)

    constructor(x: T);
>x : T

    x: T;
>x : T
}

let c51 = new C5('hello');
>c51 : (Anonymous class)<string>
>new C5('hello') : (Anonymous class)<string>
>C5 : typeof (Anonymous class)
>'hello' : "hello"

c51.x;
>c51.x : string
>c51 : (Anonymous class)<string>
>x : string

let c52 = new C5(42);
>c52 : (Anonymous class)<number>
>new C5(42) : (Anonymous class)<number>
>C5 : typeof (Anonymous class)
>42 : 42

c52.x;
>c52.x : number
>c52 : (Anonymous class)<number>
>x : number

type BoxFactory<T> = typeof class Box {
>BoxFactory : typeof Box
>class Box {    static default: T;    constructor(value?: T);    value: T;} : typeof Box
>Box : typeof Box

    static default: T;
>default : T

    constructor(value?: T);
>value : T | undefined

    value: T;
>value : T
}

declare let StringBox: BoxFactory<string>;
>StringBox : typeof Box

StringBox.default;
>StringBox.default : string
>StringBox : typeof Box
>default : string

let sb = new StringBox('hello');
>sb : BoxFactory<string>.Box
>new StringBox('hello') : BoxFactory<string>.Box
>StringBox : typeof Box
>'hello' : "hello"

sb.value;
>sb.value : string
>sb : BoxFactory<string>.Box
>value : string

declare let NumberBox: BoxFactory<number>;
>NumberBox : typeof Box

NumberBox.default;
>NumberBox.default : number
>NumberBox : typeof Box
>default : number

let nb = new NumberBox(42);
>nb : BoxFactory<number>.Box
>new NumberBox(42) : BoxFactory<number>.Box
>NumberBox : typeof Box
>42 : 42

nb.value;
>nb.value : number
>nb : BoxFactory<number>.Box
>value : number

declare const sb1: InstanceType<BoxFactory<string>>;
>sb1 : BoxFactory<string>.Box

sb1.value;
>sb1.value : string
>sb1 : BoxFactory<string>.Box
>value : string

declare const nb1: InstanceType<BoxFactory<number>>;
>nb1 : BoxFactory<number>.Box

nb1.value;
>nb1.value : number
>nb1 : BoxFactory<number>.Box
>value : number

function Printable1<T extends new (...args: any[]) => object>(Base: T) {
>Printable1 : <T extends new (...args: any[]) => object>(Base: T) => { new (...args: any[]): (Anonymous class); prototype: Printable1<any>.(Anonymous class); foo: string; } & T
>args : any[]
>Base : T

    return class extends Base {
>class extends Base {        static foo: string;        print() {}    } : { new (...args: any[]): (Anonymous class); prototype: Printable1<any>.(Anonymous class); foo: string; } & T
>Base : object

        static foo: string;
>foo : string

        print() {}
>print : () => void
    }
}

declare function Printable2<T extends new (...args: any[]) => object>(Base: T): typeof class extends Base {
>Printable2 : <T extends new (...args: any[]) => object>(Base: T) => typeof class extends Base {    static foo: string;    print(): void;}
>args : any[]
>Base : T
>class extends Base {    static foo: string;    print(): void;} : { new (...args: any[]): (Anonymous class); prototype: Printable2<any>.(Anonymous class); foo: string; } & T
>Base : object

    static foo: string;
>foo : string

    print(): void;
>print : () => void

};

type PrintableMixin = typeof class {
>PrintableMixin : typeof (Anonymous class)
>class {    constructor(...args: any[]);  // Indicates class is a mixin    static foo: string;    print(): void;} : typeof (Anonymous class)

    constructor(...args: any[]);  // Indicates class is a mixin
>args : any[]

    static foo: string;
>foo : string

    print(): void;
>print : () => void

};

declare function Printable3<T extends new (...args: any[]) => object, U>(Base: T): T & PrintableMixin;
>Printable3 : <T extends new (...args: any[]) => object, U>(Base: T) => T & PrintableMixin
>args : any[]
>Base : T

declare function Printable4<T extends new (...args: any[]) => object>(Base: T): T & typeof class Printable {
>Printable4 : <T extends new (...args: any[]) => object>(Base: T) => T & typeof Printable
>args : any[]
>Base : T
>class Printable {    constructor(...args: any[]);  // Indicates class is a mixin    static foo: string;    print(): void;} : typeof Printable
>Printable : typeof Printable

    constructor(...args: any[]);  // Indicates class is a mixin
>args : any[]

    static foo: string;
>foo : string

    print(): void;
>print : () => void

};

class MyClass {
>MyClass : MyClass

    static bar: number;
>bar : number

    x!: boolean;
>x : boolean
}

let PC1 = Printable1(MyClass);
>PC1 : { new (...args: any[]): Printable1<typeof MyClass>.(Anonymous class); prototype: Printable1<any>.(Anonymous class); foo: string; } & typeof MyClass
>Printable1(MyClass) : { new (...args: any[]): Printable1<typeof MyClass>.(Anonymous class); prototype: Printable1<any>.(Anonymous class); foo: string; } & typeof MyClass
>Printable1 : <T extends new (...args: any[]) => object>(Base: T) => { new (...args: any[]): (Anonymous class); prototype: Printable1<any>.(Anonymous class); foo: string; } & T
>MyClass : typeof MyClass

let pc1 = new PC1();
>pc1 : Printable1<typeof MyClass>.(Anonymous class) & MyClass
>new PC1() : Printable1<typeof MyClass>.(Anonymous class) & MyClass
>PC1 : { new (...args: any[]): Printable1<typeof MyClass>.(Anonymous class); prototype: Printable1<any>.(Anonymous class); foo: string; } & typeof MyClass

pc1.x;
>pc1.x : boolean
>pc1 : Printable1<typeof MyClass>.(Anonymous class) & MyClass
>x : boolean

pc1.print;
>pc1.print : () => void
>pc1 : Printable1<typeof MyClass>.(Anonymous class) & MyClass
>print : () => void

let PC2 = Printable2(MyClass);
>PC2 : { new (...args: any[]): Printable2<typeof MyClass>.(Anonymous class); prototype: Printable2<any>.(Anonymous class); foo: string; } & typeof MyClass
>Printable2(MyClass) : { new (...args: any[]): Printable2<typeof MyClass>.(Anonymous class); prototype: Printable2<any>.(Anonymous class); foo: string; } & typeof MyClass
>Printable2 : <T extends new (...args: any[]) => object>(Base: T) => { new (...args: any[]): (Anonymous class); prototype: Printable2<any>.(Anonymous class); foo: string; } & T
>MyClass : typeof MyClass

let pc2 = new PC2();
>pc2 : Printable2<typeof MyClass>.(Anonymous class) & MyClass
>new PC2() : Printable2<typeof MyClass>.(Anonymous class) & MyClass
>PC2 : { new (...args: any[]): Printable2<typeof MyClass>.(Anonymous class); prototype: Printable2<any>.(Anonymous class); foo: string; } & typeof MyClass

pc2.x;
>pc2.x : boolean
>pc2 : Printable2<typeof MyClass>.(Anonymous class) & MyClass
>x : boolean

pc2.print;
>pc2.print : () => void
>pc2 : Printable2<typeof MyClass>.(Anonymous class) & MyClass
>print : () => void

let PC3 = Printable3(MyClass);
>PC3 : typeof MyClass & typeof (Anonymous class)
>Printable3(MyClass) : typeof MyClass & typeof (Anonymous class)
>Printable3 : <T extends new (...args: any[]) => object, U>(Base: T) => T & typeof (Anonymous class)
>MyClass : typeof MyClass

let pc3 = new PC3();
>pc3 : MyClass & (Anonymous class)
>new PC3() : MyClass & (Anonymous class)
>PC3 : typeof MyClass & typeof (Anonymous class)

pc3.x;
>pc3.x : boolean
>pc3 : MyClass & (Anonymous class)
>x : boolean

pc3.print;
>pc3.print : () => void
>pc3 : MyClass & (Anonymous class)
>print : () => void

let PC4 = Printable4(MyClass);
>PC4 : typeof MyClass & typeof Printable
>Printable4(MyClass) : typeof MyClass & typeof Printable
>Printable4 : <T extends new (...args: any[]) => object>(Base: T) => T & typeof Printable
>MyClass : typeof MyClass

let pc4 = new PC4();
>pc4 : MyClass & Printable4<typeof MyClass>.Printable
>new PC4() : MyClass & Printable4<typeof MyClass>.Printable
>PC4 : typeof MyClass & typeof Printable

pc4.x;
>pc4.x : boolean
>pc4 : MyClass & Printable4<typeof MyClass>.Printable
>x : boolean

pc4.print;
>pc4.print : () => void
>pc4 : MyClass & Printable4<typeof MyClass>.Printable
>print : () => void

